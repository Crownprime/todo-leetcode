// 颠倒给定的 32 位无符号整数的二进制位。

// 示例 1：

// 输入: 00000010100101000001111010011100
// 输出: 00111001011110000010100101000000
// 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
// 示例 2：

// 输入：11111111111111111111111111111101
// 输出：10111111111111111111111111111111
// 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。

// 链接：https://leetcode-cn.com/problems/reverse-bits

/**
 * 主要考察 js 的位运算基础和常识
 * a << b 表示 a 左移动 b 位
 * a >> b 表示 a 右移动 b 位
 * a >>> b 表示无符号右移
 * @param {number} n - a positive integer
 * @return {number} - a positive integer
 */
var reverseBits = function(n) {
    // 指定了 32 位，所以不妨用 count 计数翻转
    let count = 32, res = 0;
    while(count) {
        // res 左移，空位填充 0
        res <<= 1;
        // & 表示按位 &，1就相当于取末尾一位数
        res += n & 1;
        // n 左移
        n >>= 1;
        count--;
    }
    // 由于标题要求为无符号数，所以需要最终结果无符号右移动 0
    // 主要用于应对倒转之后首尾为 1，顶到符号位变成了负数，所以原地无符号移动声明这是一个无符号数
    return res >>> 0;
};

// 定义二进制数字需要用 0b 开头
console.log(reverseBits(0b00000010100101000001111010011100));